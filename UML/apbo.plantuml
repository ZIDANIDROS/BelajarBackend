@startuml
class BarberCart {
    - barberCartID : int
    - customerID : int
    - quantity : int
    - dateAdd : date
    + menuGayaRambut()
    + pemotong(value:string)
    + gayaRambutPopuler(value:enum)
    + produk()
    + reservasiLayanan()
}

class Orders {
    - orderID : int
    - jadwalBuat : date
    - jadwalPesanan : date
    - customerName : string
    - customerID : int
    - status : bool
    - creditCardInfo : string
    - barberID : int
    - barberCartID : int
    + ketersediaanTempat(value:int)
    + ketersediaanParkir(value:int)
    + reservasi()
    + pemrosesanPembayaran()
    + nomorAntrian(value:int)
}

class OrderDetails {
    - orderID : int
    - modelID : int
    - unitCost : int
    - subtotal : float
    + kalkulasiHarga()
}

class User {
    - nomorTelepon : int
    - password : string
    - loginStatus : string
    - registerDate : date
    + verifyLogin() : bool
}

class Customer {
    - userName : string
    - addres : string
    - age : int
    - email : string
    - barberinfo : string
    - antrianPelanggan : int
    - jadwalPesanan : date
    + Login()
    + LogOut()
    + setName(value:string)
    + getName(value:string)
    + updateProfile()
}

class Employee {
    - employeeName : string
    - email : string
    + setName(value:string)
    + getName(value:string)
    + keahlian(value:enum)
    + absenPagi()
    + absenPulang()
}

class Manager {
    - kodeManager
    + kegiatan()
    + updateAntrian()
}

class Capster {
    - kodeBarber
    + kegiatan()
}

class BarberInfo {
    - barberID : int
    - status : bool
    + transaksi()
    + riwayatPesanan()
}

User <|-- Customer : Inheritance
User <|-- Employee : Inheritance
Employee <|-- Manager : Abstract
Employee <|-- Capster : Abstract
Customer *-- Orders : Composition
Customer o-- BarberCart : Aggregation
Orders --> OrderDetails : "contains"
Orders --> BarberInfo : "involves"

@enduml
